#!/usr/bin/env python

import sys
from httplib2 import URI
sys.path.append("../build/")
import phisSchema
import pyxb  # Probably using pyxb in a rather basal way...

# Strategy:
# Perhaps cleanest would be to build a separate interface for data that may vary from VFB.
# This also allows separation of Jython code
# OTOH - this gives another layer of mappings to maintain.



# Sketch of interface:
# minimal vars to set (for now):
# image_id, image URL, source links; expressed feature (+ its type - gene or transgene); classification of struc & overlapped region

ont = { "FBdv_00005369": "adult stage", "FBbt_00003624" : "adult brain", "FBbi_00000251": "confocal microscopy",  "FBbi_00000024": "whole mounted tissue", "FBbi_00000002": "chemically fixed tissue", "FBbi_00000156" : "primary antibody plus labeled secondary antibody" }

# TODO, add validation.  Should this be on individual elements?

def gen_ont_term(ont, id):
    # ont is an id/name lookup for ontology terms used here.  Populate with separate script calling brain
    ot = phisSchema.OntologyTerm()
    ot.termId = id
    ot.termLabel = ont[id]
    return ot

def link(display_name, url):
    """Takes display_name and URI as args and returns a link"""
    link = phisSchema.Link()
    link.display_name = display_name
    link.url = url
    return link

class VFB_image_dataset():
    """Class to use for generating sets of images from a common source."""
    # May not be worth bothering with a class here
    def __init__(self, source):
        """Source should be a phisSchema.Link object.""" 
        ### Do we have a way to distinguish general source from specific source links?
        self.doc = phisSchema.Doc() 
        self.source = source

class VFB_image():
    """Interface class for loading VFB data.
    Assumes 3D confocal image with 2 channels - 
    a background stain channel depicting adult brain and 
    a signal channel depicting some interesting expression/anatomy"""
    # Define constants here:  Or should this just jump straight to populating model?
    host = link("Virtual Fly Brain", "http://www.virtualflybrain.org")  # for image_description.host
    def __init__(self, ont):
        self.ont = ont
        
    def set_organism(self, stage, sex):
        """stage must be a phisSchema.ontologyTerm object; sex must be the string 'Male' or 'Female'"""
        self.organism = phisSchema.Organism()
        self.organism.taxon = "Drosophila melanogaster"
        self.organism.sex = sex
        self.organism.ncbi_taxon_id = "NCBItaxon_7227"
        self.organism.stage= stage
        
    def _initialise_image(self):
        """Assume 2 channels each with an associated ROI at 100%.
        All objects generated by multiple iterations appended to common doc.
        Generate IDs for two channels and corresponding ROIs according to the scheme:
        image_id-a/b roi_id-a/b; channel_id-a/b - where id = self.vfb_image_id."""
        
        # Generate Root objects
        self.image = phisSchema.Image()
        self.channel1 = phisSchema.Channel()
        self.channel2 = phisSchema.Channel()
        self.roi1 = phisSchema.Roi()
        self.roi2 = phisSchema.Roi()
        
        # bind root objects to doc  (Could shift outside of class)
        self.doc.append(self.image)
        self.doc.append(self.channel1)
        self.doc.append(self.channel2)
        self.doc.append(self.roi1)
        self.doc.append(self.roi2)
        
        # Populate IDs
        id = "image_" + self.vfb_image_id
        self.channel1.id = "channel_" + self.vfb_image_id + "-a"
        self.channel2.id = "channel_" + self.vfb_image_id + "-b"
        self.roi1.id  = "roi_" + self.vfb_image_id + "-a"
        self.roi2.id = "roi_" + self.vfb_image_id + "-b"
        self.image.associated_roi = pyxb.BIND()  # Special magic
        self.image.associated_roi.el.append(self.roi1.id) # Is this correct, or should I be populating a string array and appending that?  
        self.image.associated_roi.el.append(self.roi2.id)
        self.image.associated_channel = pyxb.BIND()
        self.image.associated_channel.el.append(self.channel1.id)
        self.image.associated_channel.el.append(self.channel2.id)
        self.channel1.associated_image = self.image.id
        self.channel2.associated_image = self.image.id
        self.roi1.associated_image = self.image.id
        self.roi2.associated_image = self.image.id
        self.roi1.associated_channel = pyxb.BIND()
        self.roi1.associated_channel.el.append(self.channel1.id)
        self.roi2.associated_channel = pyxb.BIND()
        self.roi2.associated_channel.el.append(self.channel2.id)
        self.channel1.associated_roi = pyxb.BIND()
        self.channel1.associated_roi.el.append(self.roi1.id)
        self.channel2.associated_roi = pyxb.BIND()
        self.channel2.associated_roi.el.append(self.roi2.id)
        
        # Expansions.  Add more here as needed.
        self.image.image_description = phisSchema.ImageDescription()
        self.image.image_description.sample_preparation = pyxb.BIND()
        self.image.image_description.imaging_method = pyxb.BIND()
        self.roi1.depicted_anatomical_structure = pyxb.BIND()  
        self.roi2.depicted_anatomical_structure = pyxb.BIND()

        
# Method 1 - intermediate node and directly bind
        imaging_methods = phisSchema.OntologyTermArray()
        self.image.image_description.imaging_method = imaging_methods # But remember - this is only possible because of an earlier pyxB expansion
        imaging_methods.append(gen_ont_term(self.ont, "FBbi_00000251"))

# Method 2 - pyxB.BIND() expansion                      
        self.image.image_description.sample_preparation = pyxb.BIND()
        self.image.image_description.sample_preparation.append(gen_ont_term(self.ont, "FBbi_00000024")) # whole mount tissue
        self.image.image_description.sample_preparation.append(gen_ont_term(self.ont, "FBbi_00000002")) # chemically fixed
        
    def set_dimensions(self, x, y, z=0):
        """x, y and z are dimensions in pixels. Z is optional (default 0)""" 
        dimensions = phisSchema.Dimensions()
        dimensions.image_width = x
        dimensions.image_height = y
        dimensions.image_depth = z
        self.image.image_description.dimensions = dimensions
        
    def set_image_and_sample_type(self):
        self.image.image_description.sample_type = "wild type"
        ita = phisSchema.ImageTypeArray()
        ita.append("expression") # Use Expression if depicts expression pattern - otherwise use anatomy/phenotype.  Don't this there is any case for using both.
        self.image.image_description.image_type = ita
        
    def set_source(self, source):
        """source must be a phisSchema.Link object. 
        Assumes source of image and organism are the same."""
        self.image.image_description.image_generated_by = source
        self.image.image_description.organism_generated_by = source
    
    def set_visualisation_method(self, sfid):
        #Should request again that visualisation method be moved down to channel
        self.image.image_description.visualisation_method =  pyxb.BIND() # FBbi_00000156"
        self.image.image_description.visualisation_method.append(gen_ont_term(self.ont, sfid)) 
        
    def set_background_depicted_entity(self, sfid):
        # By convention, background channel is always roi1
        dep = self.roi1.depicted_anatomical_structure.el
        dep.append(gen_ont_term(self.ont, sfid))
    
    def populate_depicted_anatomy_exp(self, classDict):
        ### By convention roi2 is signal channel.  # Hmmm - better to have this be in main code?
        """classDict is a name: ID dict of ontology classes to list under depicted anatomical structure on roi"""
        dep = self.roi2.depicted_anatomical_structure.el
        for Id, Name in classDict:
            depicted = phisSchema.OntologyTerm() # Not using generic method here, as assuming name and ID come in from source data.
            depicted.Termid = Id       
            depicted.TermLabel = Name
            dep.append(depicted)
            
    def set_is_expression_pattern(self):
        """By convention channel2 is signal channel."""
        # Should really just be a boolean.
        channel2.is_expression_pattern = "Yes" 
                           
    def set_channel_genetic_feature(self, gf_name, gf_id, gene_name, gene_id, gf_ensembl_id):
        ## How to specify channel.  Use defaults? ###
        stub = 1
        gc = phisSchema.genotypeComponent()
        gc.gene_id = gene_id
        
        # Bind to appropriate channel in main code?
        

class VFB_wt_adult_brain_image(VFB_image):
    """Assume wt adult adult brain image. Dimensions default = 512,512,512"""
    
    # Consider ditching this subclass if don't find a bunch of more specific things to say.  Might be better to have subclasses for neuron, clone and expression pattern
# One doc for all images.
    def __init__(self, ont, doc, vfb_image_id, image_url):
        """ont is a name_id dict lookup for ontology terms. 
        doc is a phisSchema.Doc instance
        vfb_image_id is an id string for the image
        image_url is also a string"""
        self.doc = doc
        self.ont = ont
        stage = gen_ont_term(ont, "FBdv_00005369")  # Hmmmm - global!
        self.vfb_image_id = vfb_image_id
        self._initialise_image()
        self.image.image_description.image_url = image_url
        self.set_dimensions(512, 512, 512) # Sets default - can be overridden
        #self.set_background_depicted_entity("FBbt_00003624") # adult brain
    
    def set_sex(self, sex):
        set_organism(stage, sex)
    
# Test

d = phisSchema.Doc()
print ont["FBdv_00005369"]
x = VFB_wt_adult_brain_image(ont, d, "fubar", "http://fu.bar")
print d.image.organism.toxml()
# Each branch of the schema must be expanded via pyxb.BIND() to reveal attributes:

        
        

        
        
# Assignment is simple - once you get all the way out to a node.
#depicted.termId = "FBbi_1234567"
#depicted.termLabel = "fubar"

# Append and instance of depicted to the list (el)
#image.depicted_anatomical_structure =  pyxb.BIND()  
#image.depicted_anatomical_structure.append(depicted)

# Testing
#print image.depicted_anatomical_structure.toxml()

# '<?xml version="1.0" ?><depicted_anatomical_structure><el><anatomy_ontology_id>FBbi_1234567</anatomy_ontology_id><anatomy_ontology_term>fubar</anatomy_ontology_term></el></depicted_anatomical_structure>'

# - Can't test anything more deeply nested until I fill up enough compulsory elements.

#  But all this feels quite verbose - can I make use of the Factory methods on some nodes to make this easier?

# Generating IDs and cross linking



    
